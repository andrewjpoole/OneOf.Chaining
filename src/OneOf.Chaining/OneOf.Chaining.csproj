<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
	<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
	<PackageLicenseExpression>MIT</PackageLicenseExpression>
	<Authors>Andrew Poole, Alex Steele</Authors>
	<Description>Extension methods which enable chainging of methods together, including async, any method can be chained as long as it returns a Task of OneOf of T or TFailure. Depends on the OneOf library (MIT).</Description>
	<Copyright>2024 andrew poole</Copyright>
	<RepositoryUrl>https://github.com/andrewjpoole/OneOf.Chaining</RepositoryUrl>
	<PackageTags>Async method chaining, Clear Orchestration, OneOf</PackageTags>
	<PackageReleaseNotes>
	 	1.5.0) Updated packages and removed example code which was never supposed to be in the nuget package
		1.4.0) Added versions of the extension methods with Cancellation support, plus ThenForEach()
		1.3.0) Package updates and fixed bug where OnFailure could return a TSuccess causing subsequent chained methods to run despite the previous Failure.
		1.2.0) Package updates and targeting netstandard2.1 and embedded symbols in package for ease of debugging
		1.1.0) Added parallel ThenWaitForAll and ThenWaitForFirst methods
		1.0.0) initial version
	</PackageReleaseNotes>
	<Version>1.5.0</Version>
	<RepositoryType>github</RepositoryType>
	<PackageLicenseExpression>MIT</PackageLicenseExpression>
	<EmbedAllSources>true</EmbedAllSources>
	<DebugType>Embedded</DebugType>
	<GenerateDocumentationFile>True</GenerateDocumentationFile>
	<PackageReadmeFile>README.md</PackageReadmeFile>
	<LangVersion>latest</LangVersion>
  </PropertyGroup>

	<ItemGroup>
		<None Include="..\..\README.md">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>

	<ItemGroup>
    <PackageReference Include="OneOf" Version="3.0.271" />
  </ItemGroup>

</Project>
